OTOOL-CLASSIC(1)                                              OTOOL-CLASSIC(1)



NNAAMMEE
       otool-classic - object file displaying tool

SSYYNNOOPPSSIISS
       oottooooll [ _o_p_t_i_o_n _._._.  ] [ _f_i_l_e _._._.  ]

DDEESSCCRRIIPPTTIIOONN
       The  _o_t_o_o_l_-_c_l_a_s_s_i_c  command displays specified parts of object files or
       libraries.  It is now obsolete and the command line shim, _o_t_o_o_l(1) exe-
       cutes _l_l_v_m_-_o_b_d_u_m_p(1) as the default tool.

       If  the  --mm  option  is  not used the file arguments may be of the form
       _l_i_b_x_._a_(_f_o_o_._o_), to request information about only that object  file  and
       not  the  entire  library.    (Typically  this argument must be quoted,
       _`_`_l_i_b_x_._a_(_f_o_o_._o_)_'_'_, to get it past  the  shell.)   _O_t_o_o_l_-_c_l_a_s_s_i_c  under-
       stands  both  Mach-O  (Mach  object)  files and universal file formats.
       _O_t_o_o_l_-_c_l_a_s_s_i_c can display the specified information in either  its  raw
       (numeric) form (without the --vv flag), or in a symbolic form using macro
       names of constants, etc. (with the --vv or --VV flag).

       At least one of the following options must be specified:

       --aa     Display the archive header, if the file is an archive.

       --SS     Display the contents of the `__.SYMDEF' file, if the file is  an
              archive.

       --ff     Display the universal headers.

       --hh     Display the Mach header.

       --ll     Display the load commands.

       --LL     Display  the  names  and version numbers of the shared libraries
              that the object file uses, as well as the shared library  ID  if
              the file is a shared library.

       --DD     Display  just  the  install  name  of  a  shared  library.   See
              _i_n_s_t_a_l_l___n_a_m_e___t_o_o_l(1) for more info.

       --ss _s_e_g_n_a_m_e _s_e_c_t_n_a_m_e
              Display the contents of the section (_s_e_g_n_a_m_e_,_s_e_c_t_n_a_m_e).  If  the
              --vv  flag  is  specified,  the  section is displayed as its type,
              unless the type is zero (the section header  flags).   Also  the
              sections   (__OBJC,__protocol),   (__OBJC,__string_object)   and
              (__OBJC,__runtime_setup) are displayed symbolically  if  the  --vv
              flag is specified.

       --tt     Display  the  contents of the (__TEXT,__text) section.  With the
              --vv flag, this disassembles the text.  With the --VV flag, it  also
              symbolically disassembles the operands.

       --dd     Display the contents of the (__DATA,__data) section.

       --oo     Display  the  contents  of the __OBJC segment used by the Objec-
              tive-C run-time system.

       --rr     Display the relocation entries.

       --cc     Display the argument strings (argv[] and  envp[])  from  a  core
              file.

       --II     Display the indirect symbol table.

       --TT     Display  the  table  of contents for a dynamically linked shared
              library.

       --RR     Display the reference  table  of  a  dynamically  linked  shared
              library.

       --MM     Display the module table of a dynamically linked shared library.

       --HH     Display the two-level namespace hints table.

       --GG     Display the data in code table.

       --CC     Display the linker optimization hints (-v for verbose  mode  can
              also be added).

       --PP     Print the info plist section, (__TEXT,__info_plist), as strings.


       The following options may also be given:

       --pp _n_a_m_e
              Used with the --tt and --vv or --VV options to start  the  disassembly
              from  symbol _n_a_m_e and continue to the end of the (__TEXT,__text)
              section.

       --vv     Display verbosely (symbolically) when possible.

       --VV     Display the disassembled operands symbolically (this implies the
              --vv option).  This is useful with the --tt option.

       --XX     Don't  print  leading  addresses  or headers with disassembly of
              sections.

       --qq     Use the llvm disassembler when doing disassembly; this is avail-
              able for the x86 and arm architectures.  This is the default.

       --mmccppuu==_a_r_g
              When  doing  disassembly using the llvm disassembler use the cpu
              _a_r_g_.

       --ffuunnccttiioonn__ooffffsseettss
              When doing disassembly print the decimal offset  from  the  last
              label printed.

       --jj     When  doing  disassembly  print the opcode bytes of the instruc-
              tions.

       --QQ     Use _o_t_o_o_l_-_c_l_a_s_s_i_c(1)'s disassembler when doing disassembly.

       --aarrcchh _a_r_c_h___t_y_p_e
              Specifies the architecture, _a_r_c_h___t_y_p_e_, of the  file  for  _o_t_o_o_l_-
              _c_l_a_s_s_i_c(1)  to operate on when the file is a universal file (aka
              a file with multiple architectures).  (See _a_r_c_h(3) for the  cur-
              rently known _a_r_c_h___t_y_p_es.)  The _a_r_c_h___t_y_p_e can be "all" to operate
              on all architectures in the file.  The  default  is  to  display
              only  the host architecture, if the file contains it; otherwise,
              all architectures in the file are shown.

       --mm     The object file names are not assumed to be in the  archive(mem-
              ber) syntax, which allows file names containing parenthesis.

       ----vveerrssiioonn
              Print the _o_t_o_o_l_-_c_l_a_s_s_i_c(1) version information.

SSEEEE AALLSSOO
       llvm-otool(1), install_name_tool(1), dyld(1) and libtool(1)



Apple Inc.                       June 22, 2017                OTOOL-CLASSIC(1)
